version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:16-alpine
    container_name: vms-postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: vms_db
      POSTGRES_USER: vms_user # <--- Database username
      POSTGRES_PASSWORD: vms_password # <--- Database password
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vms_user -d vms_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application Service
  app:
    build: .
    container_name: vms-spring-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # --- DATABASE CONNECTION DETAILS (ADD THESE!) ---
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/vms_db # 'db' is the service name of your PostgreSQL container
      SPRING_DATASOURCE_USERNAME: vms_user # <--- IMPORTANT: Must match POSTGRES_USER in 'db' service
      SPRING_DATASOURCE_PASSWORD: vms_password # <--- IMPORTANT: Must match POSTGRES_PASSWORD in 'db' service
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver # Good practice to explicitly set

      # Optional: Explicitly set Hibernate Dialect if not auto-detected reliably
      # spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect # This goes in application.yml, not as env var

      # --- PROFILE SELECTION ---
      SPRING_PROFILES_ACTIVE: qa
      # SPRING_PROFILES_ACTIVE: prod

      # --- AZURE CREDENTIALS (ONLY NEEDED FOR 'prod' profile) ---
      # ... (keep your Azure environment variables as they were)
      # CLIENT_ID: ${AZURE_CLIENT_ID:-DUMMY_CLIENT_ID_FOR_PROD}
      # CLIENT_SECRET: ${AZURE_CLIENT_SECRET:-DUMMY_CLIENT_SECRET_FOR_PROD}
      # TENANT_ID: ${AZURE_TENANT_ID:-DUMMY_TENANT_ID_FOR_PROD}
      # VMS_EMAIL: ${VMS_SENDER_EMAIL:-DUMMY_SENDER_EMAIL_FOR_PROD@example.com}

    depends_on:
      db:
        condition: service_healthy

volumes:
  pg_data: